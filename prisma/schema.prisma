// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Spieler-Modell
model Player {
  id                Int          @id @default(autoincrement())
  name             String      @unique
  nickname         String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime?   @updatedAt
  gamesPlayed      Int          @default(0)
  gamesWon         Int          @default(0)
  averageScore     Float        @default(0)
  highestScore     Int          @default(0)
  checkoutPercentage Float       @default(0)
  favoriteDouble   Int?
  profileImage     String?
  games            Game[]       @relation("PlayerGames")
  throws           Throw[]
  wonGames         Game[]       @relation("PlayerWonGames")
  gamePlayers      GamePlayer[] @relation("PlayerGamePlayers")
  statistics       PlayerStatistics?
  wonGamesAsWinner Game[]       @relation("GameWinner")
  
  @@map("players")
}

// Spiel-Modell
model Game {
  id                Int      @id @default(autoincrement())
  gameType          String
  startTime         DateTime @default(now())
  endTime           DateTime?
  status            String   @default("ongoing")
  score             Int      @default(501)
  isFinished        Boolean  @default(false)
  settings          String
  winner            Player?  @relation("GameWinner", fields: [winnerId], references: [id])
  winnerId          Int?
  players           GamePlayer[]
  throws            Throw[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt
  playerGames       Player[]  @relation("PlayerGames")
  playerWonGames    Player[]  @relation("PlayerWonGames")

  @@index([winnerId])
  @@map("games")
}

// Spieler-Spiel-Verbindung
model GamePlayer {
  id                Int      @id @default(autoincrement())
  game             Game     @relation(fields: [gameId], references: [id])
  gameId           Int
  player           Player   @relation("PlayerGamePlayers", fields: [playerId], references: [id])
  playerId         Int
  position         Int      // Spielerreihenfolge
  finalScore       Int?
  averageScore     Float    @default(0)
  highestScore     Int      @default(0)
  checkoutPercentage Float   @default(0)
  
  @@unique([gameId, playerId])
  @@map("game_players")
}

// Wurf-Modell
model Throw {
  id            Int      @id @default(autoincrement())
  game          Game     @relation(fields: [gameId], references: [id])
  gameId        Int
  player        Player   @relation(fields: [playerId], references: [id])
  playerId      Int
  roundNumber   Int
  dartNumber    Int      // 1, 2 oder 3 f√ºr den Wurf in der Runde
  score         Int
  multiplier    Int      // 1, 2 oder 3
  targetNumber  Int?     // Welche Zahl wurde getroffen
  isBull        Boolean  // War es ein Bull?
  busted        Boolean  @default(false) // Indicates if this throw was part of a busted round
  createdAt     DateTime @default(now())

  @@index([gameId])
  @@index([playerId])
  @@map("throws")
}

model PlayerStatistics {
  id                Int      @id @default(autoincrement())
  playerId          Int      @unique
  player            Player   @relation(fields: [playerId], references: [id])
  gamesPlayed       Int      @default(0)
  gamesWon          Int      @default(0)
  highestCheckout   Int      @default(0)
  average           Float    @default(0)
  checkoutPercentage Float   @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt
}
