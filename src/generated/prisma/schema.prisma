// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Spieler-Modell
model Player {
  id                 Int      @id @default(autoincrement())
  name               String
  nickname           String?
  createdAt          DateTime @default(now())
  gamesPlayed        Int      @default(0)
  gamesWon           Int      @default(0)
  averageScore       Float    @default(0)
  highestScore       Int      @default(0)
  checkoutPercentage Float    @default(0)
  favoriteDouble     Int?
  profileImage       String?

  // Beziehungen
  gamePlayers GamePlayer[]
  throws      Throw[]
  wonGames    Game[]

  @@map("players")
}

// Spiel-Modell
model Game {
  id        Int       @id @default(autoincrement())
  gameType  String // 'X01' | 'Cricket' | 'AroundTheWorld' | 'Shanghai'
  startTime DateTime  @default(now())
  endTime   DateTime?
  status    String    @default("ongoing") // 'ongoing' | 'completed' | 'abandoned'
  winnerId  Int?

  // Spieleinstellungen als JSON
  settings String // JSON string f√ºr flexible Einstellungen

  // Beziehungen
  gamePlayers GamePlayer[]
  throws      Throw[]
  winner      Player?      @relation(fields: [winnerId], references: [id])

  @@map("games")
}

// Spieler-Spiel-Verbindung
model GamePlayer {
  id                 Int   @id @default(autoincrement())
  gameId             Int
  playerId           Int
  position           Int // Spielerreihenfolge
  finalScore         Int?
  averageScore       Float @default(0)
  highestScore       Int   @default(0)
  checkoutPercentage Float @default(0)

  // Beziehungen
  game   Game   @relation(fields: [gameId], references: [id])
  player Player @relation(fields: [playerId], references: [id])

  @@unique([gameId, playerId])
  @@map("game_players")
}

// Wurf-Modell
model Throw {
  id             Int      @id @default(autoincrement())
  gameId         Int
  playerId       Int
  round          Int
  throwNumber    Int // 1 | 2 | 3
  segment        Int
  multiplier     Int // 1 | 2 | 3
  score          Int
  remainingScore Int
  timestamp      DateTime @default(now())

  // Beziehungen
  game   Game   @relation(fields: [gameId], references: [id])
  player Player @relation(fields: [playerId], references: [id])

  @@map("throws")
}
